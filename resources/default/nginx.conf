    # TODO REQUIRED
    # By including a mime.types file, the server can ensure that it correctly
    # identifies the MIME type of each file it serves, and sends the
    # appropriate Content-Type header in the HTTP response. This is important
    # for ensuring that web browsers and other clients can correctly
    # interpret the content of the response.
    # Include the file with MIME types
    include       mime.types;

    # TODO REQUIRED
    # The default_type directive is used to set the default MIME type for files
    # that do not have a corresponding MIME type specified in the mime.types
    # configuration file or in a specific location block.
    # The application/octet-stream MIME type is a generic binary file type
    # that is used as a fallback option when the server cannot determine the
    # correct MIME type for a file. This MIME type essentially tells the
    # client that the data being sent is a generic binary stream of bytes, and
    # that the client should not try to interpret the data in any specific way.
    default_type  application/octet-stream;

    # Start the first server block
    server {
        # TODO REQUIRED
        # Listen on port 80 for the example.com domain
        # The listen directive is used to specify the IP address and port on
        # which the web server will listen for incoming connections. In the
        # example listen 80;, the server will listen on port 80, which is the
        # default HTTP port.
        listen       8080;

        # Set the server name to example.com
        server_name  localhost;

        # Set the maximum size of incoming client bodies to 10MB
        client_max_body_size 1024;

        # Set the default error pages for various HTTP errors
        error_page 404 /404.html;

        # Route for /loc_defined_index_not_exist with only GET method allowed
        location /home {
            limit_except GET {
                deny all;
            }
            index index.html;
        }

        # Route for /loc_defined_index_which_exist that redirects to /about
        location /about-us {
#         todo: not all error pages are inherited
            index about_us.html;
            location /contacts {
                index contact.html;
            }
        }

        # TODO REQUIRED
        # This configuration block specifies the document root directory and
        # default index files for the web server when a user accesses the
        # root URL (i.e., "/") of the domain or website. In this case, the
        # document root directory is set to "/var/www/example.com/html",
        # which means that any files requested by the client will be looked
        # up in that directory. Additionally, the index files that the web
        # server should look for when no specific file is requested are
        # "index.html" and "index.htm", in that order.
        location / {
            # location /loc_defined_index_which_exist {} ?
            root   example/htmls/;
            index  index.html index.html;
            error_page 500 502 503 504 loc/50x.html;
        }

        # TODO NOT SURE
        # The limit_except directive inside the location block is used to
        # restrict the HTTP methods that are allowed for requests to this
        # route. In this case, only the GET and POST methods are allowed, and
        # any other method is denied with the deny all directive.
        # The return directive is used to issue a redirect for requests to
        # this route. In this case, it is redirecting all requests to
        # https://api.example.com$request_uri.
        # The 302 status code indicates a temporary redirect.
#         location /api {
#             # Limit the allowed HTTP methods to GET and POST
#             # HTTP 403 - Forbidden: This error is returned when the client
#             # is not authorized to access the requested resource. This may
#             # happen due to various reasons such as invalid authentication
#             # credentials, insufficient permissions, or access control lists.
#             limit_except GET POST {
#                 deny all;
#             }
#
#             # Redirect requests to https://api.example.com
#             return 302 https://api.example.com$request_uri;
#         }
        # TODO REQUIRED
        # Route for /uploads that serves files from /var/www/example.com/uploads/
        # Define the location for requests to /uploads
        # In summary, this location block is designed to handle file uploads
        # to the "/uploads" URL path, and to serve files from the specified
        # directory while enabling directory listing for that directory.
        location /uploads {
            # Set the temporary directory for storing client bodies during
            # file uploads
            # In the context of a web server, the "client body" refers to the
            # data sent by the client as part of an HTTP request, typically
            # in the form of a request body. This can include data such as
            # form data, file uploads, and other request payloads.
            # The client_body_temp_path directive is used to specify a
            # temporary directory where the web server can store the client
            # body during file uploads. This is necessary because file
            # uploads can be large, and the server needs to store the data
            # somewhere temporarily while it is being processed.
            client_body_temp_path /var/www/example.com/uploads/;

            # Only store client bodies in files, not in memory
            client_body_in_file_only on;

            # Set the buffer size for reading client bodies during file uploads
            client_body_buffer_size 128K;

            # Only accept POST and PUT requests to this location
            # HTTP 405 - Method Not Allowed: This error is returned when the
            # client requests a method that is not allowed for the requested
            # resource. For example, if the client sends a POST request to a
            # URL that only accepts GET requests.
            if ($request_method !~ ^(POST|PUT)$) {
                return 405;
            }

            location /something {
               location /whatever {
                            root /var/www;
                            location /something {
                            return 401;
                                              }
                        }
                root /var/www/example.com/uploads/something;
            }
            # Serve files from /var/www/example.com/uploads/ and allow
            # directory listing
            root /var/www/example.com/;
            error_page 404 upl/404.html;
            error_page 500 502 503 504 upl/50x.html;
            autoindex on;
        }

        # Route for /downloads that only allows POST and PUT methods
        location /downloads {
            limit_except POST {
                deny all;
            }
            root /var/www/example.com/;
        }

        # TODO I`M STUCK
        # Define the location for PHP files
        # Define the location for PHP files
#         location ~ \.php$ {
#             # Include the file with FastCGI params
#             include        fastcgi_params;
#
#             # Pass requests to the PHP-FPM socket
#             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;
#
#             # Set the default index file for PHP files
#             fastcgi_index  index.php;
#
#             # Set the path to the PHP script file
#             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
#         }
    }

    # Start the second server block
#     server {
#         # Listen on port 80 for any other domains
#         listen       80 default_server;
#
#         # Set the server name to _
#         server_name  _;
#
#         # Return a 404 error for any requests to this server block
#         return       404;
#     }
