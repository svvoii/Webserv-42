/*
** This is where the request from the web-browser is parsed.
** `HttpRequest` class receives the request as a string 
** at the time of construction of the object.
** It handles the parsing and stores the
** individual parts of the request in class members.
**
** The `HttpRequest` object is created on the heap in the
** `_handle()` method of the `HttpServer` class.
** And it is deleted in the `_respond()` method of the `HttpServer` class.
** This is done to avoid memory leaks when the server was interrupted (ctrl-c).
**
** After the request is parsed, the `HttpResponse` class
** is creaded and the `HttpRequest` object is passed to its
** constructor. The responce is generated by the `HttpResponse`. 
*/

#ifndef HTTPREQUEST_HPP
#define HTTPREQUEST_HPP

#include "../../Sockets/HeaderSockets.hpp"

#include <sstream> // std::stringstream
#include <string>
#include <map>
#include <string.h>
#include <iomanip> // std::setw and std::setfill

#define BUF_SIZE 10240 // 100 KB to store the request from the browser

class HttpServer;

enum requestMethod {
	NONE,
	GET,
	POST,
	PUT,
	DELETE,
	OPTIONS
};

class HttpRequest {
	private:

		enum requestMethod	_method; // To store the type of the request from the browser, GET, POST etc.
		std::string			_uriPath; // To store the requested path from the browser
		std::string			_httpVersion;
		std::string			_bodyBuffer;
		std::map<std::string, std::string>	_headers;

		// parsing helpers	
		void _parseHeaders(const std::string& line); // To parse the headers of the HTTP request
		void _extractRequestLine(); // To extract the first line of the HTTP request
		void _printInHEX(char *buff, int len); // To print the request in HEX

	public:

		HttpRequest(const std::string& requestBuffer); // Constructor reseives the request buffer from HttpServer::_handle() method
		~HttpRequest();

		// Getters
		std::string			getMethod();
		std::string 		getUri();
		std::string 		getHttpVersion();
		std::string			getBodyBuffer();
		std::map<std::string, std::string> getHeaders();

		// Clean parsing helpers
		std::string			trim(const std::string& str);
		enum requestMethod	isMethod(const std::string& str);

};

#endif

/* EXAMPLE OF MAKING A POST REQUEST FROM THE BROWSER:
**
** in the browser console execute the following:

fetch('127.0.0.1:8080', {
  method: 'POST',
  Headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    title: 'this is the titel',
    body: 'this is the body',
    userId: 1,
  }),
})
.then(response => response.json())
.then(data => console.log(data))
.catch((error) => console.error('Error:', error));

*/

/* ANOTHER EXAMPLE OF A POST REQUEST FROM THE BROWSER.
** This one will send the OPTIONS request first.. ?!
**

fetch('http://localhost:8080', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    key1: 'value1',
    key2: 'value2',
  }),
})
.then(response => response.json())
.then(data => console.log(data))
.catch((error) => {
  console.error('Error:', error);
});

*/